/*
 * File: app/controller/ClientController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('JavisERP.controller.ClientController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.clientController',

    id: 'clientcontroller',

    views: [
        'ClientWindow',
        'ClientRecord'
    ],

    stores: [
        'State',
        'TerritoryStore',
        'CustomerStage',
        'PostalCode'
    ],

    refs: [
        {
            ref: 'clientGrid',
            selector: 'clientgrid'
        },
        {
            ref: 'contentCards',
            selector: 'contentCards'
        },
        {
            ref: 'clientRecord',
            selector: 'clientrecord'
        },
        {
            ref: 'contactWindow',
            selector: 'contactwindow'
        },
        {
            ref: 'contactGrid',
            selector: 'contactgrid'
        },
        {
            ref: 'publicationGrid',
            selector: 'publicationgrid'
        },
        {
            ref: 'clientPortlet',
            selector: 'clientportlet'
        },
        {
            ref: 'contractWindow',
            selector: 'contractwindow'
        },
        {
            ref: 'contractGrid',
            selector: '#clientcontractgrid'
        },
        {
            ref: 'advertisementGrid',
            selector: '#clientadgrid'
        },
        {
            ref: 'paymentGrid',
            selector: '#paymentgrid'
        },
        {
            ref: 'editButton',
            selector: 'button[cls=edit_button]'
        }
    ],

    onActionColumnClick: function(grid, col, row) {
        this.application.fireEvent('clientRecordChange',grid,col,row);
    },

    onNewContractClick: function(target) {
        this.application.fireEvent("addContract",target);
    },

    onNewPaymentButtonClick: function(button, e, options) {
        var payment = new JavisERP.view.ContractPaymentWindow();
        payment.show();
    },
    onSalesTabChange: function(panel,newCard,oldCard,e){
        switch(newCard.cls){
            case 'clientadvertisements':
                this.getAdvertisementGrid().getStore().clearFilter(true);
                this.getAdvertisementGrid().getStore().filter("client_id", me.client_id);
                break;
            case 'clientcontracts':
                this.getContractGrid().getStore().clearFilter(true);
                this.getContractGrid().getStore().filter("client_id",me.client_id);
                break;
            case 'clientpublications':
                this.getPublicationGrid().getStore().clearFilter(true);
                this.getPublicationGrid().getStore().filter("client_id",me.client_id);
                break;
            case 'clientpayments':
                this.getPaymentGrid().getStore().clearFilter(true);
                this.getPaymentGrid().getStore().filter("client_id",me.client_id);
                break;
        }
    },

    onSaveContactClick: function(button, e, option){
        console.log("saving contact!");
    },

    onNewButtonClick: function(button, e, options){
        var win = new JavisERP.view.ClientWindow();
        this.getContactGrid().getStore().clearFilter(true);
        this.getContactGrid().getStore().filter("client_id",me.client_id);
        win.show();
    },

    onEditButtonClick: function(button, e, options){
        console.log(me.client_id);
    },

    onListViewClick: function(button, e, options){
        //console.log("List View!");
        this.application.fireEvent('navigationChange',button.itemId);
    },

    onNewContactButtonClick: function(button, e, options){
        me.contactWindow = new JavisERP.view.ContactWindow();

        me.contact_id = null;
        me.contact = new JavisERP.model.Contact({
            client_id: me.client_id
        });

        me.contact.save({
            callback: function(record,operation,success){
                me.contact_id = record.data.id;
                me.contactWindow.getComponent('contactform').getForm().setValues({
                    client_name: me.client_name,
                    client_id: me.client_id,
                    id: record.data.id
                });
            }
        });

        me.contactWindow.show();
    },

    init: function(application) {
        me = this;
        me.contactWindow = null;
        me.contractWindow = null;
        me.adWindow = null;

        me.application.on({
            clientRecordChange: me.changeClientRecord,
            scope: me
        });

        me.application.on({
            addContract: me.addContract,
            scope:me
        });

        this.control({
            "clientgrid #actions, clientportlet #actions": {
                click: this.onActionColumnClick
            },
            "clientrecord toolbar button[itemId=newcontract]": {
                click: this.onNewContractClick
            },
            "button[cls=newPaymentButton]": {
                click: this.onNewPaymentButtonClick
            },
            "recordnav[cls=clientrecordnav] button[cls=edit_button]": {
                click: this.onEditButtonClick
            },
            "recordnav[cls=clientrecordnav] button[cls=listview_button]": {
                click: this.onListViewClick
            },
            "recordnav[cls=clientrecordnav] button[cls=new_button]": {
                click: this.onNewButtonClick
            },
            "tabpanel[cls=salestab]": {
                tabchange: this.onSalesTabChange
            },
            "button[cls=saveContactButton]": {
                click: this.onSaveContactClick
            },
            "contactgrid toolbar button[cls=newcontact]": {
                click: this.onNewContactButtonClick
            }
        });
    },

    changeClientRecord: function(grid, col, row, record) {
        this.getContentCards().getLayout().setActiveItem('ClientRecord');
        var form = this.getClientRecord().getForm();
        me.crec = this.getClientGrid().getStore().getAt(row);
        form.loadRecord(this.getClientGrid().getStore().getAt(row));

        var clientId = this.getClientGrid().getStore().getAt(row).data.id;
        var clientName = this.getClientGrid().getStore().getAt(row).data.company_name;
        me.application.fireEvent("setClientFields",clientId,clientName);

        this.getContactGrid().getStore().clearFilter(true);
        this.getContactGrid().getStore().filter("client_id", clientId);

        this.getPublicationGrid().getStore().clearFilter(true);
        this.getPublicationGrid().getStore().filter("client_id",clientId);

        this.getPaymentGrid().getStore().clearFilter(true);
        this.getPaymentGrid().getStore().filter("client_id",clientId);

        this.getContractGrid().getStore().clearFilter(true);
        this.getContractGrid().getStore().filter("client_id",clientId);

        this.getAdvertisementGrid().getStore().clearFilter(true);
        this.getAdvertisementGrid().getStore().filter("client_id", clientId);

    },

    addContract: function() {
        me.contractWindow = new JavisERP.view.ContractWindow();

        me.contract_id = null;
        me.contract = new JavisERP.model.Contract({
            client_id: me.client_id
        });

        me.contract.save({
            callback: function(record,operation,success){
                me.contract_id = record.data.id;
                me.contractWindow.getComponent('contractform').getForm().setValues({id: record.data.id});
            }
        });

        this.getAdvertisementGrid().getStore().clearFilter(true);
        this.getAdvertisementGrid().getStore().filter("contract_id",me.contract_id);
        me.contractWindow.show();
    }

});
